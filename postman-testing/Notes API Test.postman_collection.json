{
	"info": {
		"_postman_id": "5c1f93d7-bfc5-4ad5-aae5-2e34cc4b356a",
		"name": "Notes API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1506272"
	},
	"item": [
		{
			"name": "Adding Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 201 value', () => {\r",
							"  pm.response.to.have.status(201)\r",
							"})\r",
							"\r",
							"pm.test(\"response Content-Type header should have application/json\", () => {\r",
							"  const responseHeader = pm.response.headers.get('Content-Type');\r",
							"  pm.expect(responseHeader).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test(\"response body should be an object\", () => {\r",
							"  const responseJSON = pm.response.json();\r",
							"  pm.expect(responseJSON).to.be.an('object');\r",
							"})\r",
							"\r",
							"pm.test(\"response body should have the correct property and value\", () => {\r",
							"  const responseJSON = pm.response.json();\r",
							"\r",
							"  pm.expect(responseJSON).to.ownProperty('status');\r",
							"  pm.expect(responseJSON.status).to.equals('success');\r",
							"\r",
							"  pm.expect(responseJSON).to.ownProperty('message');\r",
							"  pm.expect(responseJSON.message).to.equals('Catatan berhasil ditambahkan');\r",
							"\r",
							"  pm.expect(responseJSON).to.ownProperty('data');\r",
							"  pm.expect(responseJSON.data).to.be.an('object');\r",
							"})\r",
							"\r",
							"pm.test(\"response body should have the correct property and value\", () => {\r",
							"  const responseJSON = pm.response.json();\r",
							"  const requestJSON = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"  const { data } = responseJSON;\r",
							"\r",
							"  pm.expect(data).to.ownProperty('noteId');\r",
							"  pm.expect(data.noteId).to.not.equals('');\r",
							"\r",
							"  pm.environment.set('noteId', data.noteId)\r",
							"  pm.environment.set('title', requestJSON.title)\r",
							"  pm.environment.set('tags', requestJSON.tags)\r",
							"  pm.environment.set('body', requestJSON.body)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Makanan sehat tinggi protein\",\r\n  \"tags\": [\r\n    \"food\",\r\n    \"healthy\",\r\n    \"diet\"\r\n  ],\r\n  \"body\": \"Daftar makananan protein tinggi : Telur, Udang, Tuna, Susu\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/notes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Adding Notes with Bad Note Payload",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 400 value', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json; charset=utf-8 value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});     \r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body object should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson.message).to.be.ok;\r",
							"})\r",
							"\r",
							"const repeatRequestUntilDatasetEmpty = () => {\r",
							"    const badNotePayloads = pm.environment.get('badNotePayloads');\r",
							"    if(badNotePayloads && badNotePayloads.length > 0) {\r",
							"        postman.setNextRequest('Adding Notes with Bad Note Payload');\r",
							"    }\r",
							"}\r",
							"repeatRequestUntilDatasetEmpty();"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let badNotePayloads = pm.environment.get('badNotePayloads');  // ini akan bertipe Array\r",
							" \r",
							"if (!badNotePayloads || badNotePayloads.length === 0) {\r",
							"    // inisialisasi dengan sejumlah note yang tidak sesuai\r",
							"    badNotePayloads = [\r",
							"        { tags: [\"Android\", \"Web\"], body: \"Isi dari catatan A\" },\r",
							"        { title: 1, tags: [\"Android\", \"Web\"], body: \"Isi dari catatan A\" },\r",
							"        { title: \"Catatan A\", body: \"Isi dari catatan A\" },\r",
							"        { title: \"Catatan A\", tags: [1, \"2\"], body: \"Isi dari catatan A\" },\r",
							"        { title: \"Catatan A\", tags: [\"Android\", \"Web\"] },\r",
							"        { title: \"Catatan A\", tags: [\"Android\", \"Web\"], body: true }\r",
							"    ]\r",
							"}\r",
							" \r",
							"let currentBadNotePayload = badNotePayloads.shift();  // hapus index 0, geser sisanya\r",
							"pm.environment.set('currentBadNotePayload', JSON.stringify(currentBadNotePayload));\r",
							"pm.environment.set('badNotePayloads', badNotePayloads);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{currentBadNotePayload}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/notes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting All Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response should have status code 200\", () => {\r",
							"  pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"response header Content-Type should have 'application/json'\", () => {\r",
							"  const responseHeader = pm.response.headers.get('Content-Type');\r",
							"  pm.expect(responseHeader).to.equals('application/json; charset=utf-8')\r",
							"})\r",
							"\r",
							"pm.test(\"response body should be an object\", () => {\r",
							"  const responseJSON = pm.response.json();\r",
							"  pm.expect(responseJSON).to.be.an('object')\r",
							"})\r",
							"\r",
							"pm.test(\"response body should have the correct property and value\", () => {\r",
							"  const responseJSON = pm.response.json();\r",
							"\r",
							"  pm.expect(responseJSON).to.ownProperty('status');\r",
							"  pm.expect(responseJSON.status).to.equals('success');\r",
							"\r",
							"  pm.expect(responseJSON).to.ownProperty('data');\r",
							"  pm.expect(responseJSON).to.be.an('object');\r",
							"})\r",
							"\r",
							"pm.test(\"response body data should have anotes array and contain at least 1 item\", () => {\r",
							"  const responseJSON = pm.response.json();\r",
							"  const { data } = responseJSON;\r",
							"\r",
							"  pm.expect(data).to.ownProperty('notes');\r",
							"  pm.expect(data.notes).to.be.an('array');\r",
							"  pm.expect(data.notes).lengthOf.at.least(1);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/notes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Specified Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response status code should have 200 value\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"response header Content-Type should have 'application/json' value\", () => {\r",
							"  const responseJSON = pm.response.headers.get('Content-Type');\r",
							"  pm.expect(responseJSON).equals(\"application/json; charset=utf-8\");\r",
							"})\r",
							"\r",
							"pm.test(\"response body should be an object\", () => {\r",
							"  const responseJSON = pm.response.json();\r",
							"  pm.expect(responseJSON).an('object');\r",
							"})\r",
							"\r",
							"pm.test(\"response body should have correct properties and values\", () => {\r",
							"  const responseJSON = pm.response.json();\r",
							"\r",
							"  pm.expect(responseJSON).ownProperty('status', 'success');\r",
							"  pm.expect(responseJSON).ownProperty('data').an('object');\r",
							"})\r",
							"\r",
							"pm.test(\"response body data should contain note object\", () => {\r",
							"  const responseJSON = pm.response.json();\r",
							"  const { data } = responseJSON;\r",
							"\r",
							"  pm.expect(data).ownProperty(\"note\").an(\"object\")\r",
							"})\r",
							"\r",
							"pm.test(\"note object should contain correct value for id, title, body, and tags property\", () => {\r",
							"  const responseJSON = pm.response.json();\r",
							"  const { data: { note } } = responseJSON;\r",
							"  \r",
							"  const { noteId, title, tags, body } = pm.environment.toObject()\r",
							"\r",
							"  pm.expect(note).ownProperty('id', noteId);\r",
							"  pm.expect(note).ownProperty('title', title);\r",
							"  pm.expect(note).ownProperty('tags').eql(tags);\r",
							"  pm.expect(note).ownProperty('body', body);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/notes/{{noteId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response status code should have 200 value\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"response header Content-Type should have 'application/json' value\", () => {\r",
							"  const responseJSON = pm.response.headers.get('Content-Type');\r",
							"  pm.expect(responseJSON).equals('application/json; charset=utf-8');\r",
							"})\r",
							"\r",
							"pm.test(\"response body should be an object\", () => {\r",
							"  const responseJSON = pm.response.json();\r",
							"  pm.expect(responseJSON).an('object');\r",
							"})\r",
							"\r",
							"pm.test(\"response body should have the correct property and value\", () => {\r",
							"  const responseJSON = pm.response.json();\r",
							"\r",
							"  pm.expect(responseJSON).ownProperty('status', 'success')\r",
							"  pm.expect(responseJSON).ownProperty('message', 'Catatan berhasil diperbarui')\r",
							"})\r",
							"\r",
							"pm.test('when request the updated note', () => {\r",
							"  const requestJSON = JSON.parse(pm.request.body.raw);\r",
							"  const noteId = pm.environment.get('noteId')\r",
							"\r",
							"  pm.sendRequest(`http://localhost:3000/notes/${noteId}`, (error, response) => {\r",
							"    if (!error) {\r",
							"      pm.test('then the updated note should contain the latest data', () => {\r",
							"        const responseJSON = response.json()\r",
							"        const { title, tags, body } = requestJSON;\r",
							"        const { data : { note } } = responseJSON;\r",
							"\r",
							"        if (title) pm.expect(note.title).equals(title);\r",
							"        if (tags) pm.expect(note.tags).eql(tags);\r",
							"        if (body) pm.expect(note.body).equals(body);\r",
							"      })\r",
							"    }\r",
							"  })\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Makanan sehat untuk diet\",\r\n  \"body\": \"Daftar makanan yang cocok untuk diet\",\r\n  \"tags\": [\r\n    \"food\",\r\n    \"healthy\",\r\n    \"diet\",\r\n    \"self-awareness\"\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/notes/{{noteId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Note with Bad Note Payload",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 400 value', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							" \r",
							"pm.test('response Content-Type header should have application/json; charset=utf-8 value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"}); \r",
							" \r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							" \r",
							"pm.test('response body object should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson.message).to.be.ok;\r",
							"});\r",
							" \r",
							"const repeatRequestUntilDatasetEmpty = () => {\r",
							"    const badNotePayloads = pm.environment.get('badNotePayloads');\r",
							" \r",
							"    if(badNotePayloads && badNotePayloads.length > 0) {\r",
							"        postman.setNextRequest('Update Note with Bad Note Payload');\r",
							"    }\r",
							"}\r",
							" \r",
							"repeatRequestUntilDatasetEmpty();"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let badNotePayloads = pm.environment.get('badNotePayloads');  // ini akan bertipe Array\r",
							" \r",
							"if (!badNotePayloads || badNotePayloads.length === 0) {\r",
							"    // inisialisasi dengan sejumlah note yang tidak sesuai\r",
							"    badNotePayloads = [\r",
							"        { tags: [\"Android\", \"Web\"], body: \"Isi dari catatan A\" },\r",
							"        { title: 1, tags: [\"Android\", \"Web\"], body: \"Isi dari catatan A\" },\r",
							"        { title: \"Catatan A\", body: \"Isi dari catatan A\" },\r",
							"        { title: \"Catatan A\", tags: [1, \"2\"], body: \"Isi dari catatan A\" },\r",
							"        { title: \"Catatan A\", tags: [\"Android\", \"Web\"] },\r",
							"        { title: \"Catatan A\", tags: [\"Android\", \"Web\"], body: true }\r",
							"    ]\r",
							"}\r",
							" \r",
							"const currentBadNotePayload = badNotePayloads.shift();  // hapus index 0, geser sisanya\r",
							"pm.environment.set('currentBadNotePayload', JSON.stringify(currentBadNotePayload));\r",
							"pm.environment.set('badNotePayloads', badNotePayloads);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{currentBadNotePayload}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/notes/{{noteId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response status code should have 200 value\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"response header Content-Type should have 'application/json' value\", () => {\r",
							"  const responseHeader = pm.response.headers.get('Content-Type');\r",
							"  pm.expect(responseHeader).equals('application/json; charset=utf-8');\r",
							"})\r",
							"\r",
							"pm.test(\"response body should be an object\", () => {\r",
							"  const responseBody = pm.response.json();\r",
							"  pm.expect(responseBody).an('object');\r",
							"})\r",
							"\r",
							"pm.test(\"response body should have correct property and value\", () => {\r",
							"  const responseBody = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseBody).ownProperty('status', 'success');\r",
							"  pm.expect(responseBody).ownProperty('message', 'Catatan berhasil dihapus');\r",
							"})\r",
							"\r",
							"pm.test(\"when request the deleted note\", () => {\r",
							"  const noteId = pm.environment.get('noteId');\r",
							"\r",
							"  pm.sendRequest(`http://localhost:3000/notes/${noteId}`, (err, res) => {\r",
							"    pm.test(\"the deleted note should be not found\", () => {\r",
							"      if (!err) {\r",
							"        pm.expect(res.code).to.equals(404);\r",
							"\r",
							"        const responseJSON = res.json();\r",
							"        pm.expect(responseJSON).ownProperty('status', 'fail')\r",
							"        pm.expect(responseJSON).ownProperty('message', 'Catatan tidak ditemukan.')\r",
							"      }\r",
							"    })\r",
							"  })\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/notes/{{noteId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Adding User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 201 value', () => {\r",
							"  pm.response.to.have.status(201);\r",
							"}); \r",
							" \r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"}); \r",
							" \r",
							"pm.test('response body should an object', () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							" \r",
							"pm.test('response body should have correct property and value', () => {\r",
							"  const responseJson = pm.response.json();\r",
							"\r",
							"  pm.expect(responseJson).to.ownProperty('status');\r",
							"  pm.expect(responseJson.status).to.equals('success');\r",
							"  pm.expect(responseJson).to.ownProperty('message');\r",
							"  pm.expect(responseJson.message).to.equals('User berhasil ditambahkan');\r",
							"  pm.expect(responseJson).to.ownProperty('data');\r",
							"  pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							" \r",
							"pm.test('response body data should have userId property and not equal to empty', () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  const { data } = responseJson;\r",
							"\r",
							"  pm.expect(data).to.ownProperty('userId');\r",
							"  pm.expect(data.userId).to.not.equals('');\r",
							"\r",
							"  pm.environment.set('currentUserId', data.userId);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{$timestamp}}-{{newUsername}}\",\r\n    \"password\": \"{{newPassword}}\",\r\n    \"fullname\": \"{{newFullname}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Adding User with Existing Username",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/* referensi: https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#sending-requests-from-scripts */\r",
							" \r",
							"const postRequest = {\r",
							"  url: 'http://localhost:3000/users',\r",
							"  method: 'POST',\r",
							"  header: {\r",
							"  'Content-Type': 'application/json',\r",
							"  },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({\r",
							"      username: 'testing',\r",
							"      password: pm.environment.get('newPassword'),\r",
							"      fullname: pm.environment.get('newFullname')\r",
							"    }),\r",
							"  },\r",
							"};\r",
							" \r",
							"pm.sendRequest(postRequest, (error, response) => {\r",
							"    console.log(error ? error : response.json());\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 400 value', () => {\r",
							"   pm.response.to.have.status(400);\r",
							"}); \r",
							" \r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"}); \r",
							" \r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							" \r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							" \r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Gagal menambahkan user. Username sudah digunakan.');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"testing\",\r\n  \"password\": \"{{newPassword}}\",\r\n  \"fullname\": \"{{newFullname}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Adding User with Bad User Payload",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let badUserPayloads = pm.environment.get('badUserPayloads');\r",
							"\r",
							"if (!badUserPayloads || badUserPayloads.length === 0) {\r",
							"    badUserPayloads = [\r",
							"        { password: 'secret', fullname: 'John Doe' },\r",
							"        { username: 1, password: 'secret', fullname: 'John Doe' },\r",
							"        { username: 'johndoe', fullname: 'John Doe' },\r",
							"        { username: 'johndoe', password: true, fullname: 'John Doe' },\r",
							"        { username: 'johndoe', password: 'secret'},\r",
							"        { username: 'johndoe', password: 'secret', fullname: 0 },\r",
							"    ];\r",
							"}\r",
							"\r",
							"const currentBadUserPayload = badUserPayloads.shift();\r",
							"pm.environment.set('currentBadUserPayload', JSON.stringify(currentBadUserPayload));\r",
							"pm.environment.set('badUserPayloads', badUserPayloads);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 400 value', () => {\r",
							"   pm.response.to.have.status(400);\r",
							"}); \r",
							" \r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"}); \r",
							" \r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							" \r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.not.equals(' ');\r",
							"    pm.expect(responseJson.message).to.not.equals(null);\r",
							"});\r",
							" \r",
							"const repeatRequestUntilDatasetEmpty = () => {\r",
							"    const badUserPayloads = pm.environment.get('badUserPayloads');\r",
							" \r",
							"    if(badUserPayloads && badUserPayloads.length > 0) {\r",
							"        postman.setNextRequest('Adding User with Bad User Payload');\r",
							"    }\r",
							"}\r",
							" \r",
							"repeatRequestUntilDatasetEmpty();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{currentBadUserPayload}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting User By Correct Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							" \r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"}); \r",
							" \r",
							"pm.test('response body should an object', () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							" \r",
							"pm.test('response body should have correct property and value', () => {\r",
							"  const responseJson = pm.response.json();\r",
							"\r",
							"  pm.expect(responseJson).to.have.ownProperty('status');\r",
							"  pm.expect(responseJson.status).to.equals('success');\r",
							"  pm.expect(responseJson).to.have.ownProperty('data');\r",
							"  pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							" \r",
							"pm.test('response body data should contain user object', () => {\r",
							"  const { data } = pm.response.json();\r",
							"\r",
							"  pm.expect(data).to.have.ownProperty('user');\r",
							"  pm.expect(data.user).to.be.an('object');\r",
							"});\r",
							" \r",
							"pm.test('user object should contain only id, username, and fullname with correct value', () => {\r",
							"  const { data: { user } } = pm.response.json();\r",
							"\r",
							"  pm.expect(user).to.have.ownProperty('id');\r",
							"  pm.expect(user.id).to.equals(pm.environment.get('currentUserId'));\r",
							"  pm.expect(user).to.have.ownProperty('username');\r",
							"  pm.expect(user.username).to.includes(pm.environment.get('newUsername'));\r",
							"  pm.expect(user).to.have.ownProperty('fullname');\r",
							"  pm.expect(user.fullname).to.equals(pm.environment.get('newFullname'));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/users/{{currentUserId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users",
						"{{currentUserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting User By Incorrect Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 404 value', () => {\r",
							"  pm.response.to.have.status(404);\r",
							"});\r",
							" \r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"}); \r",
							" \r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							" \r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							" \r",
							"    pm.expect(responseJson).to.have.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson).to.have.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('User tidak ditemukan');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/users/xxxx",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users",
						"xxxx"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}